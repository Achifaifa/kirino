#! /usr/bin/env pyton

import copy, os, random, sys
import item
import common, parser
sys.path.append(os.path.abspath("../data/"))
from npcs import *

class npc:
  """
  NPC generator and manager

  #Characteristic strings
  name=""           #Name
  secondname=""     #Second name
  personality=""    #Personality
  appearance=""     #Appearance
  job=""            #Job
  likes1=""         #Things this NPC likes (1)
  likes2=""         #Things this NPC likes (2)
  dislikes1=""      #Things this NPC dislikes (1)
  dislikes2=""      #Things this NPC dislikes (2)
  
  #Primary attributes
  STR=1             #Strenght
  DEX=1             #Dexterity
  CON=1             #Constitution
  INT=1             #Intelligence
  PER=1             #Perception
  WIL=1             #Willpower
  CHA=1             #Charisma

  #Status variables

  rel=0             #Relation with player 
                    # <-10    - bad
                    # -10,10  - neutral
                    # >10     - good
  """
  
  def __init__(self,gender=0,stat=5,total=16):
    """
    Constructor. Generates an NPC, as in the standalone NPC generator:
    https://github.com/Achifaifa/GM-Tools/tree/master/npcgenerator

    Options:

    Gender
      1 female
      2 male
      Defaults at a random genre

    Maximum stat level
      A number smaller than 1 is corrected to 5
      defaults to 5

    Total attribute points
      A number smaller than 1 is corrected to 16
      defaults to 16
    """

    #Sanitize input
    if stat<1: stat=5
    if total<1: total=16
    if gender not in [1,2]: gender=random.choice([1,2])

    self.attrs=["STR", "DEX", "CON", "INT", "PER", "WIL", "CHA"]
    for i in self.attrs: setattr(self,i,1)
    self.rel=0
    
    for i in range(total-6):
      rnd=random.randint(1,7)
      current=getattr(self,self.attrs[rnd])
      if current<stat: setattr(self,self.attrs[rnd],current+1)

    namel=naming.firstnames_f if gender==1 else naming.firstnames_m
    self.name=random.choice(namel)
    self.secondname=random.choice(naming.secondnames)
    self.personality=random.choice(psych.personality)
    self.appearance=random.choice(physical.appearance)
    self.job=random.choice(jobs.jobs)
    t=things.things
    self.likes1=random.choice(t)
    self.likes2=random.choice(t)
    self.dislikes1=random.choice(t)
    self.dislikes2=random.choice(t)

class vendor:
  """
  Vendor class. Creates and manages vendors (shops) in a dungeon floor.
  """

  def __init__(self):
    """
    Vendor constructor. 

    Generates a random NPC (The shopkeeper) and generates items to be sold.
    """

    self.keeper=npc(0,0,0)
    self.forsale=[]
    self.potforsale=[]
    for i in range(random.randrange(4,7)): self.forsale.append(item.item(random.randrange(1,12)))
    for i in range(random.randrange(1,4)): self.potforsale.append(item.consumable(random.choice([0,0,3,1]),0))

  def commerce(self,player):
    while 1:
      common.version()
      print "Shop\n"
      print random.choice(vendordata["welcomemsg"])
      print "\n1.- Sell"
      print "2.- Buy items"
      print "3.- Buy food/potions"
      print "4.- Chat"
      print "--"
      print "0.- Back"
      print "\n->",
      commenu=common.getch()

      if commenu=="1":self.sell(player)
      if commenu=="2":self.buyit(player)
      if commenu=="3":self.buypot(player)
      if commenu=="4":parser.chat(self.keeper,player)
      if commenu=="0":
        print random.choice(vendordata["byemsg"])
        common.getch()
        break
      else: pass

  def buypot(self,player):
    """
    Sells potions to the player. Three random potions are generated by the vendor.
    """
    
    while 1:
      common.version()
      print "Shop - Buy potions (%iG)\n"%player.pocket
      for i in range(len(self.potforsale)): print str(i+1)+".- "+self.potforsale[i].name+" ("+str(round(self.pricecalc(player)*self.potforsale[i].price))+"G)"
      print "--"
      print "0.- Back"
      print "\n->",
      buypotmenu=common.getch()

      if buypotmenu=="0":
        print "Nice doing business with you!"
        common.getch()
        break

      try:
       
        if len(self.potforsale)!=0:
          if player.pocket>=round(self.pricecalc(player)*self.potforsale[int(buypotmenu)-1].price):
            if player.belt[0].name=="--EMPTY--": player.belt[0]=copy.copy(self.potforsale[int(buypotmenu)-1])
            elif player.belt[1].name=="--EMPTY--": player.belt[1]=copy.copy(self.potforsale[int(buypotmenu)-1])
            elif player.belt[2].name=="--EMPTY--": player.belt[2]=copy.copy(self.potforsale[int(buypotmenu)-1])
            elif player.belt[3].name=="--EMPTY--": player.belt[3]=copy.copy(self.potforsale[int(buypotmenu)-1])
            elif player.belt[3].name=="--EMPTY--": player.belt[3]=copy.copy(self.potforsale[int(buypotmenu)-1])
            elif player.belt[3].name=="--EMPTY--": player.belt[3]=copy.copy(self.potforsale[int(buypotmenu)-1])
            player.pocket-=self.potforsale[int(buypotmenu)-1].price
            player.totalspn+=self.potforsale[int(buypotmenu)-1].price
            del self.potforsale[int(buypotmenu)-1]
            self.keeper.rel+=1
            print random.choice(vendordata["okmsg"])
            player.totalbuy+=1
            common.getch()

          else:
            print random.choice(vendordata["failmsg"])
            common.getch()

      except (ValueError,IndexError): pass
        

  def pricecalc(self,player):
    """
    Calculates the trading multiplier based on the player charisma and the player-NPC relationship

    Base multiplier: 2

    Additional multipliers: 

    Charisma: +- 0.1 for each point
    Relationship with vendor: +-0.5 for every 10 points
    """

    #Base modifier
    modifier=2

    #Charisma modifiers
    modifier-=(player.CHA+player.chaboost-2/10)

    #Relationship modifiers
    modifier-=(self.keeper.rel/15)
    if modifier<0.5: modifier=0.5
    return modifier

  def buyit(self,player):
    """
    Display the list of items available for buying from the vendor
    """

    while 1:
      common.version()
      print "Shop - Buy items (%iG)\n" %player.pocket
      for i in range(len(self.forsale)): print str(i+1)+".- "+self.forsale[i].name+" ("+str(round(self.pricecalc(player)*self.forsale[i].price))+"G)"
      print "--"
      print "0.- Back"
      print "\n->",

      try:
          buymenuc=common.getch()
          if buymenuc=="0":
            print "Nice doing business with you!"
            common.getch()
            break

          if player.pocket>=round(self.pricecalc(player)*self.forsale[int(buymenuc)-1].price):
            player.pocket-=(round(self.pricecalc(player)*self.forsale[int(buymenuc)-1].price))
            player.totalspn+=(round(self.pricecalc(player)*self.forsale[int(buymenuc)-1].price))
            if player.pickobject(self.forsale[int(buymenuc)-1]):
              print random.choice(vendordata["okmsg"])
              self.keeper.rel+=1
              del self.forsale[int(buymenuc)-1]
              player.totalbuy+=1
              common.getch()
            else:
              print random.choice(vendordata["failmsg"])
              common.getch()
          else:
            print random.choice(vendordata["failmsg"])
            common.getch()
      except (ValueError, IndexError): pass

  def sell(self,player):
    """
    Display the list of items in the inventory to sell
    """

    while 1:
      common.version()
      print "Shop - Sell items ("+str(player.pocket)+"G)\n"
      for i in range(len(player.inventory)):print str(i+1)+".- "+player.inventory[i].name+" ("+str(round(player.inventory[i].price/self.pricecalc(player)))+"G)"
      print "--"
      print "0.- Back"
      print "\n->",

      try:
          sellmenuc=common.getch()
          if sellmenuc=="0":
            print "Nothing else? I can pay you with roaches!"
            common.getch()
            break
          player.pocket+=round(player.inventory[int(sellmenuc)-1].price/self.pricecalc(player))
          player.totalgld+=round(player.inventory[int(sellmenuc)-1].price/self.pricecalc(player))
          player.totalsll+=1
          self.forsale.append(copy.copy(player.inventory[int(sellmenuc)-1]))
          del player.inventory[int(sellmenuc)-1]
          self.keeper.rel+=1
          print random.choice(vendordata["okmsg"])
          common.getch()
      except (ValueError, IndexError): pass

if __name__=="__main__": pass